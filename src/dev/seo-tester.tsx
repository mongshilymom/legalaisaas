import { NextPage } from 'next';
import Head from 'next/head';
import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import { 
  Search, Globe, Target, BarChart3, Copy, RefreshCw, 
  CheckCircle, XCircle, AlertTriangle, Download, Trash2,
  Code, Eye, Settings, TrendingUp, Clock, Zap 
} from 'lucide-react';

// SEO response interface
interface SeoMetaTags {
  title: string;
  description: string;
  keywords: string[];
  ogTitle: string;
  ogDescription: string;
  ogImage?: string;
  twitterTitle: string;
  twitterDescription: string;
  structuredData: any;
  recommendations: string[];
  score: number;
}

interface SeoResponse {
  success: boolean;
  data?: SeoMetaTags;
  meta?: {
    fromCache: boolean;
    executionTime: number;
    language: string;
    industry: string;
    timestamp: string;
    cacheUsed: boolean;
  };
  error?: string;
  message?: string;
}

const SeoTester: NextPage = () => {
  const { data: session, status } = useSession();
  const router = useRouter();
  
  // Form state
  const [url, setUrl] = useState('');
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [content, setContent] = useState('');
  const [keywords, setKeywords] = useState('');
  const [language, setLanguage] = useState<'ko' | 'en' | 'ja' | 'zh'>('ko');
  const [industry, setIndustry] = useState('legal');
  const [useCache, setUseCache] = useState(true);
  
  // UI state
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<SeoResponse | null>(null);
  const [showStructuredData, setShowStructuredData] = useState(false);
  const [copiedField, setCopiedField] = useState<string | null>(null);

  // Check authentication
  useEffect(() => {
    if (status === 'loading') return;
    
    if (!session?.user) {
      router.push('/auth/signin');
      return;
    }
  }, [session, status, router]);

  // Generate SEO tags
  const generateSeo = async () => {
    if (!url && !title && !content) {
      alert('URL, Ï†úÎ™©, ÎòêÎäî ÏΩòÌÖêÏ∏† Ï§ë ÌïòÎÇòÎäî ÌïÑÏàòÏûÖÎãàÎã§.');
      return;
    }

    setLoading(true);
    setResult(null);

    try {
      const requestData = {
        url: url || undefined,
        title: title || undefined,
        description: description || undefined,
        content: content || undefined,
        keywords: keywords ? keywords.split(',').map(k => k.trim()).filter(k => k) : undefined,
        language,
        industry,
        useCache,
      };

      const response = await fetch('/api/seo/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const data: SeoResponse = await response.json();
      setResult(data);

      if (data.success) {
        console.log('‚úÖ SEO generation successful:', data.meta);
      } else {
        console.error('‚ùå SEO generation failed:', data.error);
      }
    } catch (error) {
      console.error('‚ùå Request failed:', error);
      setResult({
        success: false,
        error: 'Network error',
        message: error instanceof Error ? error.message : 'Unknown error',
      });
    } finally {
      setLoading(false);
    }
  };

  // Copy to clipboard
  const copyToClipboard = async (text: string, field: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedField(field);
      setTimeout(() => setCopiedField(null), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
    }
  };

  // Export as HTML meta tags
  const exportAsHtml = () => {
    if (!result?.data) return;

    const { data } = result;
    const html = `<!-- SEO Meta Tags - Generated by Legal AI SaaS -->
<title>${data.title}</title>
<meta name="description" content="${data.description}" />
<meta name="keywords" content="${data.keywords.join(', ')}" />

<!-- Open Graph Tags -->
<meta property="og:title" content="${data.ogTitle}" />
<meta property="og:description" content="${data.ogDescription}" />
<meta property="og:type" content="website" />
${data.ogImage ? `<meta property="og:image" content="${data.ogImage}" />` : ''}

<!-- Twitter Cards -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content="${data.twitterTitle}" />
<meta name="twitter:description" content="${data.twitterDescription}" />

<!-- Structured Data -->
<script type="application/ld+json">
${JSON.stringify(data.structuredData, null, 2)}
</script>`;

    const blob = new Blob([html], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'seo-meta-tags.html';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Clear form
  const clearForm = () => {
    setUrl('');
    setTitle('');
    setDescription('');
    setContent('');
    setKeywords('');
    setResult(null);
  };

  if (status === 'loading') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!session?.user) {
    return null;
  }

  return (
    <>
      <Head>
        <title>SEO Meta Tag Generator | Legal AI SaaS</title>
        <meta name="description" content="AI-powered SEO meta tag generator for optimal search engine optimization" />
        <meta name="robots" content="noindex, nofollow" />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <div className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center">
                <Search className="h-6 w-6 text-blue-600 mr-2" />
                <span className="text-lg font-semibold text-gray-900">SEO Meta Tag Generator</span>
              </div>
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-600">Developer Tools</span>
                <div className="h-4 w-4 bg-green-500 rounded-full"></div>
              </div>
            </div>
          </div>
        </div>

        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Title */}
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">AI-Powered SEO Generator</h1>
            <p className="text-gray-600">Generate optimized meta tags, Open Graph data, and structured markup using Claude AI</p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Input Form */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">üìù Content Input</h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Website URL
                  </label>
                  <input
                    type="url"
                    value={url}
                    onChange={(e) => setUrl(e.target.value)}
                    placeholder="https://example.com"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Page Title
                  </label>
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="Enter your page title"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Meta Description
                  </label>
                  <textarea
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Enter current meta description"
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Page Content
                  </label>
                  <textarea
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                    placeholder="Paste your page content for analysis"
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Keywords (comma-separated)
                  </label>
                  <input
                    type="text"
                    value={keywords}
                    onChange={(e) => setKeywords(e.target.value)}
                    placeholder="keyword1, keyword2, keyword3"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Language
                    </label>
                    <select
                      value={language}
                      onChange={(e) => setLanguage(e.target.value as 'ko' | 'en' | 'ja' | 'zh')}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="ko">üá∞üá∑ Korean</option>
                      <option value="en">üá∫üá∏ English</option>
                      <option value="ja">üáØüáµ Japanese</option>
                      <option value="zh">üá®üá≥ Chinese</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Industry
                    </label>
                    <select
                      value={industry}
                      onChange={(e) => setIndustry(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="legal">‚öñÔ∏è Legal</option>
                      <option value="tech">üíª Technology</option>
                      <option value="ecommerce">üõí E-commerce</option>
                      <option value="finance">üí∞ Finance</option>
                      <option value="healthcare">üè• Healthcare</option>
                      <option value="education">üìö Education</option>
                      <option value="other">üè¢ Other</option>
                    </select>
                  </div>
                </div>

                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="useCache"
                    checked={useCache}
                    onChange={(e) => setUseCache(e.target.checked)}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <label htmlFor="useCache" className="ml-2 text-sm text-gray-700">
                    Use cache for faster responses
                  </label>
                </div>

                <div className="flex gap-3 pt-4">
                  <button
                    onClick={generateSeo}
                    disabled={loading}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors flex items-center justify-center disabled:opacity-50"
                  >
                    {loading ? (
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    ) : (
                      <Zap className="h-4 w-4 mr-2" />
                    )}
                    {loading ? 'Generating...' : 'Generate SEO Tags'}
                  </button>

                  <button
                    onClick={clearForm}
                    className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md transition-colors flex items-center"
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    Clear
                  </button>
                </div>
              </div>
            </div>

            {/* Results */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-900">üéØ Generated SEO Tags</h2>
                {result?.data && (
                  <button
                    onClick={exportAsHtml}
                    className="bg-green-600 hover:bg-green-700 text-white px-3 py-1.5 rounded-md text-sm flex items-center"
                  >
                    <Download className="h-4 w-4 mr-1" />
                    Export HTML
                  </button>
                )}
              </div>

              {!result ? (
                <div className="text-center py-12 text-gray-500">
                  <Target className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>Enter your content above and click "Generate SEO Tags" to see results.</p>
                </div>
              ) : result.success && result.data ? (
                <div className="space-y-6">
                  {/* Performance Info */}
                  {result.meta && (
                    <div className="bg-gray-50 rounded-lg p-4">
                      <div className="flex items-center justify-between text-sm">
                        <div className="flex items-center space-x-4">
                          <span className={`flex items-center ${result.meta.fromCache ? 'text-green-600' : 'text-blue-600'}`}>
                            {result.meta.fromCache ? <CheckCircle className="h-4 w-4 mr-1" /> : <Clock className="h-4 w-4 mr-1" />}
                            {result.meta.fromCache ? 'From Cache' : 'Generated'}
                          </span>
                          <span className="text-gray-600">
                            {result.meta.executionTime}ms
                          </span>
                          <span className="text-gray-600">
                            Score: <span className="font-semibold text-green-600">{result.data.score}/100</span>
                          </span>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* SEO Score */}
                  <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-gray-700">SEO Score</span>
                      <span className="text-2xl font-bold text-green-600">{result.data.score}/100</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-green-400 to-green-600 h-2 rounded-full transition-all duration-500"
                        style={{ width: `${result.data.score}%` }}
                      ></div>
                    </div>
                  </div>

                  {/* Meta Tags */}
                  <div className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-medium text-gray-700">Title Tag</label>
                        <button
                          onClick={() => copyToClipboard(result.data!.title, 'title')}
                          className="text-blue-600 hover:text-blue-700"
                        >
                          {copiedField === 'title' ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                        </button>
                      </div>
                      <div className="bg-gray-50 p-3 rounded border text-sm">
                        {result.data.title}
                        <span className="text-gray-500 ml-2">({result.data.title.length} chars)</span>
                      </div>
                    </div>

                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-medium text-gray-700">Meta Description</label>
                        <button
                          onClick={() => copyToClipboard(result.data!.description, 'description')}
                          className="text-blue-600 hover:text-blue-700"
                        >
                          {copiedField === 'description' ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                        </button>
                      </div>
                      <div className="bg-gray-50 p-3 rounded border text-sm">
                        {result.data.description}
                        <span className="text-gray-500 ml-2">({result.data.description.length} chars)</span>
                      </div>
                    </div>

                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-medium text-gray-700">Keywords</label>
                        <button
                          onClick={() => copyToClipboard(result.data!.keywords.join(', '), 'keywords')}
                          className="text-blue-600 hover:text-blue-700"
                        >
                          {copiedField === 'keywords' ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                        </button>
                      </div>
                      <div className="bg-gray-50 p-3 rounded border text-sm">
                        {result.data.keywords.join(', ')}
                      </div>
                    </div>

                    {/* Open Graph */}
                    <div className="border-t pt-4">
                      <h3 className="font-medium text-gray-900 mb-3">Open Graph Tags</h3>
                      <div className="space-y-2 text-sm">
                        <div className="bg-gray-50 p-2 rounded">
                          <strong>OG Title:</strong> {result.data.ogTitle}
                        </div>
                        <div className="bg-gray-50 p-2 rounded">
                          <strong>OG Description:</strong> {result.data.ogDescription}
                        </div>
                      </div>
                    </div>

                    {/* Twitter Cards */}
                    <div className="border-t pt-4">
                      <h3 className="font-medium text-gray-900 mb-3">Twitter Cards</h3>
                      <div className="space-y-2 text-sm">
                        <div className="bg-gray-50 p-2 rounded">
                          <strong>Twitter Title:</strong> {result.data.twitterTitle}
                        </div>
                        <div className="bg-gray-50 p-2 rounded">
                          <strong>Twitter Description:</strong> {result.data.twitterDescription}
                        </div>
                      </div>
                    </div>

                    {/* Structured Data */}
                    <div className="border-t pt-4">
                      <div className="flex items-center justify-between mb-3">
                        <h3 className="font-medium text-gray-900">Structured Data</h3>
                        <button
                          onClick={() => setShowStructuredData(!showStructuredData)}
                          className="text-blue-600 hover:text-blue-700 flex items-center text-sm"
                        >
                          {showStructuredData ? <Eye className="h-4 w-4 mr-1" /> : <Code className="h-4 w-4 mr-1" />}
                          {showStructuredData ? 'Hide' : 'Show'} JSON-LD
                        </button>
                      </div>
                      {showStructuredData && (
                        <pre className="bg-gray-900 text-green-400 p-4 rounded text-xs overflow-x-auto">
                          {JSON.stringify(result.data.structuredData, null, 2)}
                        </pre>
                      )}
                    </div>

                    {/* Recommendations */}
                    {result.data.recommendations.length > 0 && (
                      <div className="border-t pt-4">
                        <h3 className="font-medium text-gray-900 mb-3">üí° SEO Recommendations</h3>
                        <ul className="space-y-2">
                          {result.data.recommendations.map((rec, index) => (
                            <li key={index} className="flex items-start">
                              <TrendingUp className="h-4 w-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                              <span className="text-sm text-gray-700">{rec}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              ) : (
                <div className="text-center py-8">
                  <XCircle className="h-12 w-12 mx-auto mb-4 text-red-500" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Generation Failed</h3>
                  <p className="text-gray-600">{result.message || result.error}</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default SeoTester;