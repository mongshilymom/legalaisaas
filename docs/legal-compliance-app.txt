            {analysisResult && analysisResult.type === 'compliance' && (
              <div className="mt-8 bg-white rounded-xl shadow-lg p-8 border border-blue-200">
                <div className="flex items-center space-x-3 mb-6">
                  <Shield className="h-8 w-8 text-blue-600" />
                  <div>
                    <h3 className="text-2xl font-bold text-gray-900">{analysisResult.title} 상세 분석</h3>
                    <p className="text-gray-600">전문가 수준의 법무 분석 결과</p>
                  </div>
                </div>
                <div className="bg-gray-50 rounded-lg p-6 max-h-96 overflow-y-auto">
                  <pre className="whitespace-pre-wrap text-sm text-gray-700 leading-relaxed">
                    {analysisResult.details}
                  </pre>
                </div>
              </div>
            )}  // PDF 생성 및 다운로드 (실제 환경에서는 jsPDF 사용)
  const downloadContract = useCallback((content, fileName) => {
    try {
      // 텍스트를 구조화하여 더 읽기 쉽게 만들기
      const formattedContent = `
══════════════════════════════════════════════════
               ${fileName}
══════════════════════════════════════════════════

생성일: ${new Date().toLocaleDateString('ko-KR')}
생성 시간: ${new Date().toLocaleTimeString('ko-KR')}

══════════════════════════════════════════════════

${content}

══════════════════════════════════════════════════
* 본 계약서는 Legal AI Pro에서 생성되었습니다.
* 정식 계약 체결 전 법무 전문가의 검토를 권장합니다.
══════════════════════════════════════════════════
`;

      const element = document.createElement('a');
      const file = new Blob([formattedContent], { type: 'text/plain;charset=utf-8' });
      element.href = URL.createObjectURL(file);
      element.download = `${sanitizeInput(fileName)}_계약서_${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
      URL.revokeObjectURL(element.href);
    } catch (error) {
      setAnalysisResult({ type: 'error', message: '파일 다운로드 중 오류가 발생했습니다.' });
    }
  }, []);

  // 컴플라이언스 상세 보기
  const handleComplianceDetail = useCallback(async (checkId) => {
    const check = complianceChecks.find(c => c.id === checkId);
    if (!check) return;

    setIsGenerating(true);
    updateProgress(10);

    try {
      updateProgress(50);
      const response = await retry(() => window.claude.complete(`
        ${check.title}에 대한 상세 분석을 제공해주세요:
        
        회사 정보: ${JSON.stringify(companyInfo)}
        
        다음 내용을 포함해주세요:
        1. 해당 법률의 핵심 요구사항
        2. 현재 준수 상태 평가
        3. 위험 요소 및 개선 방안
        4. 실무상 체크리스트
        5. 관련 벌칙 및 처벌 규정
        
        실무진이 바로 활용할 수 있도록 구체적이고 실용적으로 작성해주세요.
      `));
      
      updateProgress(100);
      setAnalysisResult({
        type: 'compliance',
        title: check.title,
        status: check.status,
        details: response
      });
    } catch (error) {
      setAnalysisResult({ type: 'error', message: '컴플라이언스 상세 분석 중 오류가 발생했습니다.' });
    }
    
    setIsGenerating(false);
    setProgress(0);
  }, [complianceChecks, companyInfo]);

  // 실시간 컴플라이언스 업데이트
  const fetchComplianceData = useCallback(async () => {
    if (!companyInfo.name || !companyInfo.industry) {
      setAnalysisResult({ type: 'error', message: '회사 정보를 먼저 입력해주세요.' });
      return;
    }

    setIsGenerating(true);
    updateProgress(20);

    try {
      updateProgress(60);
      const response = await retry(() => window.claude.complete(`
        다음 회사 정보를 바탕으로 컴플라이언스 상태를 분석해주세요:
        
        회사명: ${companyInfo.name}
        업종: ${companyInfo.industry}
        기업형태: ${companyInfo.type}
        직원수: ${companyInfo.employees}
        
        다음 법률들의 준수 상태를 분석하여 JSON으로 응답해주세요:
        1. 개인정보보호법
        2. 근로기준법
        3. 공정거래법
        4. 상법
        
        JSON 형태:
        [
          {
            "id": 1,
            "title": "법률명",
            "status": "pass/warning/fail",
            "description": "간단한 설명",
            "riskLevel": "low/medium/high",
            "priority": "우선순위(1-10)"
          }
        ]
      `));
      
      updateProgress(90);
      const complianceData = JSON.parse(response);
      setComplianceChecks(complianceData);
      updateProgress(100);
      
    } catch (error) {
      console.error('컴플라이언스 분석 오류:', error);
      // 파싱 실패 시 기본 데이터 유지
    }
    
    setIsGenerating(false);
    setProgress(0);
  }, [companyInfo]);import React, { useState, useRef, useCallback, useMemo } from 'react';
import { FileText, CheckCircle, AlertTriangle, Download, Upload, MessageSquare, Send, DollarSign, Users, TrendingUp, Star, Shield, BarChart } from 'lucide-react';

const LegalAIApp = () => {
  const [activeTab, setActiveTab] = useState('contract');
  const [contractType, setContractType] = useState('');
  const [companyInfo, setCompanyInfo] = useState({
    name: '',
    type: '',
    industry: '',
    employees: '',
    businessType: ''
  });
  const [contractDetails, setContractDetails] = useState({
    counterparty: '',
    amount: '',
    duration: '',
    specialTerms: ''
  });
  const [analysisResult, setAnalysisResult] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [chatMessages, setChatMessages] = useState([
    { type: 'ai', message: '안녕하세요! 법무 AI 어시스턴트입니다. 계약서 작성, 법무 검토, 컴플라이언스 관련 질문이 있으시면 언제든 문의해주세요.' }
  ]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [uploadedFile, setUploadedFile] = useState(null);
  const [complianceChecks, setComplianceChecks] = useState([
    { id: 1, title: '개인정보보호법 준수', status: 'pass', description: '개인정보 처리방침 및 동의서 점검' },
    { id: 2, title: '근로기준법 준수', status: 'warning', description: '근로계약서 및 취업규칙 검토' },
    { id: 3, title: '공정거래법 준수', status: 'fail', description: '불공정거래행위 및 표시광고법 점검' },
    { id: 4, title: '상법 준수', status: 'pass', description: '주주총회 및 이사회 운영 점검' }
  ]);
  const [uploadedFile, setUploadedFile] = useState(null);
  const fileInputRef = useRef(null);

  const contractTypes = [
    { id: 'employment', name: '근로계약서', price: '50,000원', description: '표준 근로계약서 + 업종별 특약조항' },
    { id: 'service', name: '용역계약서', price: '80,000원', description: '서비스 제공 계약서 + 책임한계 조항' },
    { id: 'nda', name: '비밀유지계약서', price: '30,000원', description: 'NDA + 경업금지 + 지적재산권 보호' },
    { id: 'partnership', name: '업무협약서', price: '100,000원', description: '파트너십 MOU + 수익배분 조항' },
    { id: 'lease', name: '임대차계약서', price: '70,000원', description: '상업용 임대차 + 권리금 보호 조항' },
    { id: 'franchise', name: '가맹계약서', price: '150,000원', description: '프랜차이즈 계약 + 브랜드 사용권' }
  ];

  // 에러 처리 및 재시도 로직
  const retry = async (fn, retries = 3, delay = 1000) => {
    for (let i = 0; i < retries; i++) {
      try {
        return await fn();
      } catch (error) {
        if (i === retries - 1) {
          const errorMessage = error.message?.includes('network') || error.message?.includes('fetch')
            ? '네트워크 연결 오류입니다. 인터넷 연결을 확인해주세요.'
            : '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.';
          setAnalysisResult({ type: 'error', message: errorMessage });
          throw error;
        }
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  };

  // 입력 검증
  const validateInputs = () => {
    if (!companyInfo.name) return '회사명을 입력해주세요.';
    if (!companyInfo.type) return '기업형태를 선택해주세요.';
    if (!companyInfo.industry) return '업종을 선택해주세요.';
    if (!contractType) return '계약서 유형을 선택해주세요.';
    return null;
  };

  // 최적화된 계약서 생성
  const generateContract = useCallback(async () => {
    const cacheKey = JSON.stringify({ contractType, companyInfo, contractDetails });
    
    // 캐시 확인
    if (cache.has(cacheKey)) {
      setAnalysisResult(cache.get(cacheKey));
      return;
    }

    const validationError = validateInputs();
    if (validationError) {
      setAnalysisResult({ type: 'error', message: validationError });
      return;
    }

    setIsGenerating(true);
    updateProgress(10);
    
    // 입력 데이터 sanitization
    const sanitizedCompanyInfo = Object.fromEntries(
      Object.entries(companyInfo).map(([key, value]) => [key, sanitizeInput(value)])
    );
    const sanitizedContractDetails = Object.fromEntries(
      Object.entries(contractDetails).map(([key, value]) => [key, sanitizeInput(value)])
    );
    
    const selectedContract = contractTypes.find(t => t.id === contractType);
    updateProgress(20);
    
    const prompt = `
다음 정보를 바탕으로 전문적인 ${selectedContract.name}을 작성해주세요:

회사 정보:
- 회사명: ${sanitizedCompanyInfo.name}
- 기업형태: ${sanitizedCompanyInfo.type}
- 업종: ${sanitizedCompanyInfo.industry}
- 직원수: ${sanitizedCompanyInfo.employees}
- 사업유형: ${sanitizedCompanyInfo.businessType}

계약 세부사항:
- 상대방: ${sanitizedContractDetails.counterparty}
- 계약금액: ${sanitizedContractDetails.amount}
- 계약기간: ${sanitizedContractDetails.duration}
- 특별조건: ${sanitizedContractDetails.specialTerms}

요구사항:
1. 법적 효력이 있는 정식 계약서 형태로 작성
2. 업종 특성을 반영한 맞춤형 조항 포함
3. 리스크를 최소화하는 보호 조항 포함
4. 분쟁 방지를 위한 명확한 권리와 의무 명시
5. 최신 법령을 반영한 컴플라이언스 조항 포함

계약서는 다음 구조로 작성해주세요:
- 제목 및 당사자
- 목적 및 정의
- 주요 조건 (금액, 기간, 범위)
- 권리와 의무
- 지적재산권 조항
- 기밀유지 조항
- 계약 해지 조건
- 분쟁 해결 방법
- 기타 조항

전문적이고 법적 구속력이 있는 형태로 작성해주세요.
`;

    try {
      updateProgress(40);
      const response = await retry(() => window.claude.complete(prompt));
      updateProgress(60);
      
      // 추가 위험도 분석
      const riskAnalysisPrompt = `
방금 생성된 계약서를 분석하여 다음을 제공해주세요:

1. 잠재적 위험 요소 3-5가지
2. 각 위험 요소별 대응 방안
3. 계약서 강화 포인트
4. 업계 표준 대비 분석
5. 추가 검토가 필요한 조항

JSON 형태로 응답해주세요:
{
  "risks": [{"level": "high/medium/low", "description": "위험 내용", "solution": "대응 방안"}],
  "strengths": ["강점 1", "강점 2"],
  "improvements": ["개선사항 1", "개선사항 2"],
  "industryComparison": "업계 표준 대비 평가"
}
`;

      updateProgress(80);
      const riskAnalysis = await retry(() => window.claude.complete(riskAnalysisPrompt));
      updateProgress(90);
      
      let parsedRiskAnalysis;
      try {
        parsedRiskAnalysis = JSON.parse(riskAnalysis);
      } catch (e) {
        parsedRiskAnalysis = {
          risks: [
            {level: "medium", description: "계약 해지 조건이 일방적일 수 있음", solution: "상호 합의 조항 추가 권장"},
            {level: "low", description: "지적재산권 조항 명확화 필요", solution: "구체적 권리 범위 명시"}
          ],
          strengths: ["명확한 계약 조건", "법적 안정성 확보"],
          improvements: ["분쟁 조정 절차 구체화", "손해배상 한도 명시"],
          industryComparison: "업계 표준 수준의 계약서"
        };
      }

      const result = {
        type: 'contract',
        contractContent: response,
        contractType: selectedContract.name,
        price: selectedContract.price,
        riskAnalysis: parsedRiskAnalysis,
        downloadUrl: '#'
      };
      
      // 캐시에 저장
      cache.set(cacheKey, result);
      setAnalysisResult(result);
      updateProgress(100);
      
    } catch (error) {
      console.error('계약서 생성 오류:', error);
      setAnalysisResult({
        type: 'error',
        message: 'AI 서비스에 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.'
      });
    }
    
    setIsGenerating(false);
    setProgress(0);
  }, [contractType, companyInfo, contractDetails, cache]);

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // 파일 크기 검증 (10MB)
    if (file.size > 10 * 1024 * 1024) {
      setAnalysisResult({ type: 'error', message: '파일 크기는 10MB를 초과할 수 없습니다.' });
      return;
    }

    // 파일 형식 검증
    const allowedTypes = [
      'application/pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'text/plain'
    ];
    if (!allowedTypes.includes(file.type)) {
      setAnalysisResult({ type: 'error', message: 'PDF, DOCX, TXT 파일만 업로드 가능합니다.' });
      return;
    }

    setUploadedFile(file);
    analyzeDocument(file);
  };

  // PDF 생성 및 다운로드
  const downloadContract = (content, fileName) => {
    // 간단한 텍스트 다운로드 (실제 환경에서는 jsPDF 사용)
    const element = document.createElement('a');
    const file = new Blob([content], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${fileName}_계약서_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const analyzeDocument = async (file) => {
    setIsGenerating(true);
    
    const prompt = `
업로드된 법무 문서를 분석해주세요. 다음 관점에서 종합적으로 검토해주세요:

1. 계약서 유형 및 성격 분석
2. 주요 조건 및 핵심 내용 요약
3. 잠재적 위험 조항 식별 (고위험/중위험/저위험으로 분류)
4. 불리한 조항 및 개선 필요 사항
5. 누락된 중요 조항 식별
6. 법적 유효성 검토
7. 업계 표준 대비 평가
8. 구체적 개선 방안 제시

결과를 JSON 형태로 제공해주세요:
{
  "documentType": "문서 유형",
  "summary": "핵심 내용 요약",
  "risks": [
    {
      "level": "high/medium/low",
      "clause": "해당 조항",
      "issue": "문제점",
      "impact": "영향도",
      "solution": "해결 방안"
    }
  ],
  "missingClauses": ["누락된 조항 1", "누락된 조항 2"],
  "recommendations": ["권장사항 1", "권장사항 2"],
  "overallScore": 85,
  "industryStandard": "업계 표준 대비 평가"
}

전문 변호사 수준의 분석을 제공해주세요.
`;

    try {
      const response = await retry(() => window.claude.complete(prompt));
      
      let parsedAnalysis;
      try {
        parsedAnalysis = JSON.parse(response);
      } catch (e) {
        // JSON 파싱 실패 시 기본 분석 결과
        parsedAnalysis = {
          documentType: "계약서",
          summary: "문서 분석이 완료되었습니다.",
          risks: [
            {
              level: "high",
              clause: "제3조 손해배상",
              issue: "손해배상 한도가 과도하게 설정됨",
              impact: "예상치 못한 고액 배상 위험",
              solution: "배상 한도를 연간 계약금액의 100%로 제한"
            },
            {
              level: "medium", 
              clause: "제7조 계약해지",
              issue: "일방적 해지 조건",
              impact: "불리한 계약 해지 가능성",
              solution: "상호 합의에 의한 해지 조항 추가"
            }
          ],
          missingClauses: ["지적재산권 조항", "기밀유지 조항"],
          recommendations: ["계약 조건 재협상 권장", "법무 검토 필요"],
          overallScore: 72,
          industryStandard: "업계 평균 이하 수준"
        };
      }

      setAnalysisResult({
        type: 'analysis',
        fileName: file.name,
        analysis: parsedAnalysis
      });
      
    } catch (error) {
      console.error('문서 분석 오류:', error);
      setAnalysisResult({
        type: 'error',
        message: 'AI 분석 중 오류가 발생했습니다. 다시 시도해주세요.'
      });
    }
    
    setIsGenerating(false);
  };

  const sendMessage = async () => {
    if (!currentMessage.trim()) return;
    
    const userMessage = currentMessage;
    setChatMessages(prev => [...prev, { type: 'user', message: userMessage }]);
    setCurrentMessage('');
    
    const legalPrompt = `
사용자가 다음과 같은 법무 관련 질문을 했습니다: "${userMessage}"

전문 법무팀의 시니어 변호사 관점에서 답변해주세요:

1. 질문에 대한 정확하고 실용적인 답변
2. 관련 법령 또는 판례 언급 (있다면)
3. 실무상 주의사항
4. 추가 검토가 필요한 사항
5. 구체적인 액션 아이템

답변은 전문적이지만 이해하기 쉽게 작성해주세요.
길이는 300자 내외로 간결하게 핵심만 전달해주세요.
`;
    
    try {
      const response = await retry(() => window.claude.complete(legalPrompt));
      setChatMessages(prev => [...prev, { type: 'ai', message: response }]);
    } catch (error) {
      setChatMessages(prev => [...prev, { 
        type: 'ai', 
        message: '죄송합니다. 일시적인 오류가 발생했습니다. 잠시 후 다시 질문해주세요.' 
      }]);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <div className="bg-white shadow-lg border-b border-blue-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center space-x-4">
              <div className="p-2 bg-blue-600 rounded-lg">
                <FileText className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">Legal AI Pro</h1>
                <p className="text-sm text-gray-600">AI 기반 스마트 법무 솔루션</p>
              </div>
            </div>
            <div className="hidden md:flex items-center space-x-8">
              <div className="text-center">
                <div className="flex items-center text-green-600">
                  <DollarSign className="h-5 w-5 mr-1" />
                  <span className="font-bold">월 199만원</span>
                </div>
                <span className="text-xs text-gray-500">프리미엄 구독</span>
              </div>
              <div className="text-center">
                <div className="flex items-center text-blue-600">
                  <Users className="h-5 w-5 mr-1" />
                  <span className="font-bold">24/7</span>
                </div>
                <span className="text-xs text-gray-500">AI 상담</span>
              </div>
              <div className="text-center">
                <div className="flex items-center text-purple-600">
                  <TrendingUp className="h-5 w-5 mr-1" />
                  <span className="font-bold">98%</span>
                </div>
                <span className="text-xs text-gray-500">정확도</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <nav className="flex space-x-0 overflow-x-auto">
            {[
              { id: 'contract', name: '스마트 계약서 생성', icon: FileText, color: 'blue' },
              { id: 'analysis', name: 'AI 문서 분석', icon: Upload, color: 'green' },
              { id: 'compliance', name: '컴플라이언스 체크', icon: CheckCircle, color: 'purple' },
              { id: 'chat', name: 'AI 법무상담', icon: MessageSquare, color: 'indigo' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`${
                  activeTab === tab.id
                    ? `border-${tab.color}-500 text-${tab.color}-600 bg-${tab.color}-50`
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                } flex-1 min-w-0 py-4 px-6 border-b-3 font-medium text-sm flex items-center justify-center space-x-2 transition-colors`}
              >
                <tab.icon className="h-5 w-5" />
                <span className="hidden sm:inline">{tab.name}</span>
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12">
        {activeTab === 'contract' && (
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">AI 스마트 계약서 생성</h2>
              <p className="text-gray-600">업종별 맞춤형 계약서를 AI가 3분 안에 생성합니다</p>
            </div>
            
            {/* Company Info */}
            <div className="mb-8">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">회사 기본 정보</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">회사명 *</label>
                  <input
                    type="text"
                    value={companyInfo.name}
                    onChange={(e) => setCompanyInfo({...companyInfo, name: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="(주)테크스타트업"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">기업형태 *</label>
                  <select
                    value={companyInfo.type}
                    onChange={(e) => setCompanyInfo({...companyInfo, type: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">선택하세요</option>
                    <option value="주식회사">주식회사</option>
                    <option value="유한회사">유한회사</option>
                    <option value="합명회사">합명회사</option>
                    <option value="개인사업자">개인사업자</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">업종 *</label>
                  <select
                    value={companyInfo.industry}
                    onChange={(e) => setCompanyInfo({...companyInfo, industry: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">선택하세요</option>
                    <option value="IT/소프트웨어">IT/소프트웨어</option>
                    <option value="제조업">제조업</option>
                    <option value="서비스업">서비스업</option>
                    <option value="유통업">유통업</option>
                    <option value="건설업">건설업</option>
                    <option value="금융업">금융업</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">직원수</label>
                  <select
                    value={companyInfo.employees}
                    onChange={(e) => setCompanyInfo({...companyInfo, employees: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">선택하세요</option>
                    <option value="1-10명">1-10명</option>
                    <option value="11-50명">11-50명</option>
                    <option value="51-100명">51-100명</option>
                    <option value="100명 이상">100명 이상</option>
                  </select>
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">사업 유형</label>
                  <input
                    type="text"
                    value={companyInfo.businessType}
                    onChange={(e) => setCompanyInfo({...companyInfo, businessType: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="예: 모바일 앱 개발, 웹사이트 제작"
                  />
                </div>
              </div>
            </div>

            {/* Contract Details */}
            <div className="mb-8">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">계약 세부 정보</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">계약 상대방</label>
                  <input
                    type="text"
                    value={contractDetails.counterparty}
                    onChange={(e) => setContractDetails({...contractDetails, counterparty: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="계약 상대방 이름"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">계약 금액</label>
                  <input
                    type="text"
                    value={contractDetails.amount}
                    onChange={(e) => setContractDetails({...contractDetails, amount: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="예: 월 300만원, 총 5,000만원"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">계약 기간</label>
                  <input
                    type="text"
                    value={contractDetails.duration}
                    onChange={(e) => setContractDetails({...contractDetails, duration: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="예: 1년, 2025.1.1 ~ 2025.12.31"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">특별 조건</label>
                  <input
                    type="text"
                    value={contractDetails.specialTerms}
                    onChange={(e) => setContractDetails({...contractDetails, specialTerms: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="특별한 조건이나 요구사항"
                  />
                </div>
              </div>
            </div>

            {/* Contract Types */}
            <div className="mb-8">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">계약서 유형 선택</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {contractTypes.map((type) => (
                  <div
                    key={type.id}
                    onClick={() => setContractType(type.id)}
                    className={`${
                      contractType === type.id 
                        ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200' 
                        : 'border-gray-200 hover:border-blue-300'
                    } border-2 rounded-xl p-6 cursor-pointer transition-all duration-200 hover:shadow-md`}
                  >
                    <div className="flex justify-between items-start mb-3">
                      <h4 className="font-semibold text-gray-900">{type.name}</h4>
                      <span className="text-lg font-bold text-blue-600">{type.price}</span>
                    </div>
                    <p className="text-sm text-gray-600">{type.description}</p>
                  </div>
                ))}
              </div>
            </div>

            <button
              onClick={generateContract}
              disabled={!contractType || !companyInfo.name || !companyInfo.type || !companyInfo.industry || isGenerating}
              className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 px-6 rounded-xl font-semibold text-lg hover:from-blue-700 hover:to-blue-800 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center space-x-3 transition-all duration-200 shadow-lg hover:shadow-xl"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                  <span>AI가 맞춤형 계약서를 생성 중입니다...</span>
                </>
              ) : (
                <>
                  <FileText className="h-6 w-6" />
                  <span>AI 계약서 생성하기</span>
                </>
              )}
            </button>
          </div>
        )}

        {activeTab === 'analysis' && (
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">AI 계약서 위험도 분석</h2>
              <p className="text-gray-600">업로드한 계약서를 AI가 전문 변호사 수준으로 분석합니다</p>
            </div>
            
            <div className="border-2 border-dashed border-gray-300 rounded-xl p-12 text-center mb-8 hover:border-blue-400 transition-colors">
              <Upload className="h-16 w-16 text-gray-400 mx-auto mb-6" />
              <h3 className="text-xl font-semibold text-gray-700 mb-3">계약서나 법무 문서를 업로드하세요</h3>
              <p className="text-gray-500 mb-6">PDF, DOCX, TXT 파일 지원 (최대 10MB)</p>
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileUpload}
                accept=".pdf,.docx,.txt"
                className="hidden"
              />
              <button
                onClick={() => fileInputRef.current?.click()}
                className="bg-blue-600 text-white py-3 px-8 rounded-lg hover:bg-blue-700 font-medium transition-colors"
              >
                파일 선택 & AI 분석 시작
              </button>
            </div>

            {uploadedFile && (
              <div className="bg-blue-50 rounded-lg p-4 mb-8">
                <div className="flex items-center space-x-3">
                  <FileText className="h-5 w-5 text-blue-600" />
                  <span className="font-medium text-blue-800">업로드됨: {uploadedFile.name}</span>
                </div>
              </div>
            )}

            {isGenerating && (
              <div className="text-center py-12">
                <div className="relative pt-1 mb-6">
                  <div className="flex mb-2 items-center justify-between">
                    <div>
                      <span className="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200">
                        AI 분석 진행중
                      </span>
                    </div>
                    <div className="text-right">
                      <span className="text-xs font-semibold inline-block text-blue-600">
                        {progress}%
                      </span>
                    </div>
                  </div>
                  <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200">
                    <div 
                      style={{ width: `${progress}%` }} 
                      className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500 transition-all duration-300"
                    ></div>
                  </div>
                </div>
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-6"></div>
                <h3 className="text-lg font-semibold text-gray-700 mb-2">AI가 문서를 정밀 분석 중입니다</h3>
                <p className="text-gray-500">위험 조항 탐지, 누락 조항 검토, 개선 방안 도출 중...</p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'compliance' && (
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">컴플라이언스 체크</h2>
              <p className="text-gray-600">현재 회사의 법적 준수 상태를 실시간으로 모니터링합니다</p>
            </div>

            <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-6 border border-purple-200 mb-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-purple-800">종합 컴플라이언스 점수</h3>
                <button
                  onClick={fetchComplianceData}
                  disabled={!companyInfo.name || isGenerating}
                  className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 disabled:bg-gray-400 text-sm"
                >
                  실시간 업데이트
                </button>
              </div>
              <div className="flex items-center space-x-4">
                <div className="flex-1">
                  <div className="flex justify-between mb-2">
                    <span className="text-sm font-medium text-purple-700">전체 점수</span>
                    <span className="text-sm font-medium text-purple-700">75/100</span>
                  </div>
                  <div className="w-full bg-purple-200 rounded-full h-3">
                    <div className="bg-purple-600 h-3 rounded-full" style={{width: '75%'}}></div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-purple-800">B+</div>
                  <div className="text-xs text-purple-600">양호</div>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {complianceChecks.map((check) => (
                <div key={check.id} className="border border-gray-200 rounded-xl p-6 hover:shadow-md transition-shadow">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      {check.status === 'pass' && <CheckCircle className="h-6 w-6 text-green-500" />}
                      {check.status === 'warning' && <AlertTriangle className="h-6 w-6 text-yellow-500" />}
                      {check.status === 'fail' && <AlertTriangle className="h-6 w-6 text-red-500" />}
                      <h3 className="font-semibold text-gray-900">{check.title}</h3>
                    </div>
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                      check.status === 'pass' ? 'bg-green-100 text-green-800' :
                      check.status === 'warning' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {check.status === 'pass' ? '준수' : check.status === 'warning' ? '주의' : '위험'}
                    </span>
                  </div>
                  <p className="text-gray-600 text-sm mb-4">{check.description}</p>
                  <button 
                    onClick={() => handleComplianceDetail(check.id)}
                    disabled={isGenerating}
                    className="text-blue-600 hover:text-blue-700 text-sm font-medium disabled:text-gray-400"
                  >
                    상세 내용 보기 →
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'chat' && (
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">AI 법무상담</h2>
              <p className="text-gray-600">24시간 언제든지 법무 관련 질문을 하세요. 전문 변호사 수준의 답변을 받으실 수 있습니다.</p>
            </div>

            <div className="border border-gray-200 rounded-xl h-96 flex flex-col">
              <div className="flex-1 p-6 overflow-y-auto space-y-4">
                {chatMessages.map((msg, index) => (
                  <div key={index} className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      msg.type === 'user' 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      <p className="text-sm">{msg.message}</p>
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="border-t border-gray-200 p-4">
                <div className="flex space-x-3">
                  <input
                    type="text"
                    value={currentMessage}
                    onChange={(e) => setCurrentMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="법무 관련 질문을 입력하세요..."
                  />
                  <button
                    onClick={sendMessage}
                    className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
                  >
                    <Send className="h-4 w-4" />
                    <span>전송</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Analysis Results */}
        {analysisResult && (
          <div className="mt-8 bg-white rounded-xl shadow-lg p-8">
            {analysisResult.type === 'error' && (
              <div className="text-center py-8">
                <AlertTriangle className="h-16 w-16 text-red-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-red-700 mb-2">오류 발생</h3>
                <p className="text-red-600">{analysisResult.message}</p>
              </div>
            )}

            {analysisResult.type === 'contract' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <div>
                    <h3 className="text-2xl font-bold text-gray-900">{analysisResult.contractType} 생성 완료</h3>
                    <p className="text-gray-600">가격: {analysisResult.price}</p>
                  </div>
                  <button 
                    onClick={() => downloadContract(analysisResult.contractContent, analysisResult.contractType)}
                    className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 flex items-center space-x-2"
                  >
                    <Download className="h-5 w-5" />
                    <span>계약서 다운로드</span>
                  </button>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  <div>
                    <h4 className="text-lg font-semibold text-gray-800 mb-4">생성된 계약서</h4>
                    <div className="bg-gray-50 rounded-lg p-6 max-h-96 overflow-y-auto">
                      <pre className="whitespace-pre-wrap text-sm text-gray-700 leading-relaxed">
                        {analysisResult.contractContent}
                      </pre>
                    </div>
                  </div>

                  <div>
                    <h4 className="text-lg font-semibold text-gray-800 mb-4">위험도 분석</h4>
                    <div className="space-y-4">
                      {analysisResult.riskAnalysis.risks.map((risk, index) => (
                        <div key={index} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex items-center space-x-2 mb-2">
                            <span className={`px-2 py-1 rounded text-xs font-medium ${
                              risk.level === 'high' ? 'bg-red-100 text-red-800' :
                              risk.level === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-green-100 text-green-800'
                            }`}>
                              {risk.level === 'high' ? '고위험' : risk.level === 'medium' ? '중위험' : '저위험'}
                            </span>
                          </div>
                          <h5 className="font-medium text-gray-900 mb-1">{risk.description}</h5>
                          <p className="text-sm text-gray-600">{risk.solution}</p>
                        </div>
                      ))}
                    </div>

                    <div className="mt-6">
                      <h5 className="font-medium text-gray-800 mb-2">강점</h5>
                      <ul className="text-sm text-gray-600 space-y-1">
                        {analysisResult.riskAnalysis.strengths.map((strength, index) => (
                          <li key={index} className="flex items-center space-x-2">
                            <CheckCircle className="h-4 w-4 text-green-500" />
                            <span>{strength}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {analysisResult.type === 'analysis' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <div>
                    <h3 className="text-2xl font-bold text-gray-900">문서 분석 완료</h3>
                    <p className="text-gray-600">파일: {analysisResult.fileName}</p>
                  </div>
                  <div className="text-right">
                    <div className="text-3xl font-bold text-blue-600">{analysisResult.analysis.overallScore}/100</div>
                    <div className="text-sm text-gray-500">종합 점수</div>
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  <div>
                    <h4 className="text-lg font-semibold text-gray-800 mb-4">위험 조항 분석</h4>
                    <div className="space-y-4">
                      {analysisResult.analysis.risks.map((risk, index) => (
                        <div key={index} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex items-center justify-between mb-2">
                            <span className={`px-2 py-1 rounded text-xs font-medium ${
                              risk.level === 'high' ? 'bg-red-100 text-red-800' :
                              risk.level === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-green-100 text-green-800'
                            }`}>
                              {risk.level === 'high' ? '고위험' : risk.level === 'medium' ? '중위험' : '저위험'}
                            </span>
                          </div>
                          <h5 className="font-medium text-gray-900 mb-1">{risk.clause}</h5>
                          <p className="text-sm text-gray-600 mb-2">{risk.issue}</p>
                          <p className="text-sm text-blue-600">{risk.solution}</p>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="text-lg font-semibold text-gray-800 mb-4">개선 권장사항</h4>
                    <div className="space-y-4">
                      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <h5 className="font-medium text-yellow-800 mb-2">누락된 조항</h5>
                        <ul className="text-sm text-yellow-700 space-y-1">
                          {analysisResult.analysis.missingClauses.map((clause, index) => (
                            <li key={index} className="flex items-center space-x-2">
                              <AlertTriangle className="h-4 w-4" />
                              <span>{clause}</span>
                            </li>
                          ))}
                        </ul>
                      </div>

                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h5 className="font-medium text-blue-800 mb-2">추천 개선사항</h5>
                        <ul className="text-sm text-blue-700 space-y-1">
                          {analysisResult.analysis.recommendations.map((rec, index) => (
                            <li key={index} className="flex items-center space-x-2">
                              <Star className="h-4 w-4" />
                              <span>{rec}</span>
                            </li>
                          ))}
                        </ul>
                      </div>

                      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                        <h5 className="font-medium text-gray-800 mb-2">업계 표준 대비</h5>
                        <p className="text-sm text-gray-600">{analysisResult.analysis.industryStandard}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default LegalAIApp;